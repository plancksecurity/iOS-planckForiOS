//
//  TestData.swift
//  pEpForiOS
//
//  Created by Dirk Zimmermann on 02/11/16.
//  Copyright © 2016 p≡p Security S.A. All rights reserved.
//

import UIKit

import MessageModel

class TestData {
    var idAddress = "email@example.com"
    var idUserName = "User Name"
    var smtpServerAddress = "mail.example.com"
    var smtpServerType = Server.ServerType.smtp.rawValue
    var smtpServerTransport = Server.Transport.startTls.rawValue
    var smtpServerPort = 587
    var imapServerAddress = "mail.example.com"
    var imapServerType = Server.ServerType.imap.rawValue
    var imapServerTransport = Server.Transport.tls.rawValue
    var imapServerPort = 993
    
    /**
     An account that should not be able to be verified.
     */
    func createDisfunctionalCdAccount() -> CdAccount {
        let account = createWorkingCdAccount()
        for creds in account.credentials!.array as! [CdServerCredentials] {
            for server in creds.servers!.sortedArray(using: []) as! [CdServer] {
                server.port = 4096
            }
        }
        return account
    }

    /**
     Like `createDisfunctionalAccount`, but this account including credentials
     should be valid.
     */
    func createWorkingCdAccount() -> CdAccount {
        let id = CdIdentity.create(
            with: ["address": idAddress, "userName": idUserName])
        
        let smtp = CdServer.create(
            with: ["serverType": smtpServerType,
                   "port": smtpServerPort,
                   "address": smtpServerAddress,
                   "transport": smtpServerTransport])
        
        let imap = CdServer.create(
            with: ["serverType": imapServerType,
                   "port": imapServerPort,
                   "address": "server.address",
                   "transport": Server.Transport.tls.rawValue])

        let key = UUID.generate()
        CdServerCredentials.add(password: "somepassword", forKey: key)

        let cred = CdServerCredentials.create(
            with: ["userName": id.address!,
                   "key": key,
                   "servers": NSSet(array: [imap, smtp])])
        
        let acc = CdAccount.create(with: ["identity": id,
                                          "credentials": NSOrderedSet(array: [cred])])
        
        return acc
    }

    func createWorkingAccount() -> Account {
        let id = Identity.create(address: "user1@example.com", userName: "User 1")
        let smtp = Server.create(serverType: .smtp, port: 4096, address: "localhost",
                                 transport: .plain)
        let imap = Server.create(serverType: .imap, port: 4097, address: "localhost",
                                 transport: .plain)
        let cred = ServerCredentials.create(userName: id.address, password: "password",
                                            servers: [smtp, imap])
        let acc = Account.create(identity: id, credentials: [cred])
        return acc
    }

    func createDisfunctionalAccount() -> Account {
        let acc = createWorkingAccount()
        for sc in acc.serverCredentials {
            for server in sc.servers {
                server.port = 4096
            }
        }
        return acc
    }
}
