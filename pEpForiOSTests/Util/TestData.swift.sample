//
//  TestData.swift
//  pEpForiOS
//
//  Created by Dirk Zimmermann on 02/11/16.
//  Copyright © 2016 p≡p Security S.A. All rights reserved.
//

import UIKit

import MessageModel

struct AccountSettings {
    var accountName = "default"
    var idAddress = "email@example.com"
    var idUserName = "User Name"
    var smtpServerAddress = "mail.example.com"
    var smtpServerType = Server.ServerType.smtp.rawValue
    var smtpServerTransport = Server.Transport.startTls.rawValue
    var smtpServerPort: UInt16 = 587
    var imapServerAddress = "mail.example.com"
    var imapServerType = Server.ServerType.imap.rawValue
    var imapServerTransport = Server.Transport.tls.rawValue
    var imapServerPort: UInt16 = 993
    
    init() {}
    
    init(accountName: String)
    {
        self.accountName = accountName
    }
}

class TestData {
    
    var testAccounts = [AccountSettings]()
    
    /**
     Add default account to collection.
     */
    func _populateDefaultAccount()
    {
        let testAccount = AccountSettings()
        testAccounts.append(testAccount)
    }
    
    /**
     An account that should not be able to be verified.
     */
    func createDisfunctionalCdAccount() -> CdAccount {
        let account = createWorkingCdAccount()
        for creds in account.credentials!.array as! [CdServerCredentials] {
            for server in creds.servers!.sortedArray(using: []) as! [CdServer] {
                server.port = 4096
            }
        }
        return account
    }

    /**
     Like `createDisfunctionalAccount`, but this account including credentials
     should be valid.
     */
    func createWorkingCdAccount() -> CdAccount {
        _populateDefaultAccount()
        
        let id = CdIdentity.create(
            with: ["address": testAccounts[0].idAddress, "userName": testAccounts[0].idUserName])
        
        let smtp = CdServer.create(
            with: ["serverType": testAccounts[0].smtpServerType,
                   "port": testAccounts[0].smtpServerPort,
                   "address": testAccounts[0].smtpServerAddress,
                   "transport": testAccounts[0].smtpServerTransport])
        
        let imap = CdServer.create(
            with: ["serverType": testAccounts[0].imapServerType,
                   "port": testAccounts[0].imapServerPort,
                   "address": testAccounts[0].imapServerType,
                   "transport": testAccounts[0].imapServerTransport])

        let key = UUID.generate()
        CdServerCredentials.add(password: "somepassword", forKey: key)

        let cred = CdServerCredentials.create(
            with: ["userName": id.address!,
                   "key": key,
                   "servers": NSSet(array: [imap, smtp])])
        
        let acc = CdAccount.create(with: ["identity": id,
                                          "credentials": NSOrderedSet(array: [cred])])
        
        return acc
    }

    func createWorkingAccount() -> Account {
        _populateDefaultAccount()
        
        let id = Identity.create(address: testAccounts[0].idAddress,
                                 userName: testAccounts[0].idUserName)
        
        let smtp = Server.create(serverType: .smtp,
                                 port: testAccounts[0].smtpServerPort,
                                 address: testAccounts[0].smtpServerAddress,
                                 transport: Server.Transport(rawValue: testAccounts[0].smtpServerTransport))
        
        
        let imap = Server.create(serverType: .imap,
                                 port: testAccounts[0].imapServerPort,
                                 address: testAccounts[0].imapServerAddress,
                                 transport: Server.Transport(rawValue: testAccounts[0].imapServerTransport))
        
        let cred = ServerCredentials.create(userName: id.address, password: "password",
                                            servers: [smtp, imap])
        
        let acc = Account.create(identity: id, credentials: [cred])
        
        return acc
    }

    func createDisfunctionalAccount() -> Account {
        let acc = createWorkingAccount()
        for sc in acc.serverCredentials {
            for server in sc.servers {
                server.port = 4096
            }
        }
        return acc
    }
}
