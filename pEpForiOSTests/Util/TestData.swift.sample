//
//  TestData.swift
//  pEpForiOS
//
//  Created by Dirk Zimmermann on 02/11/16.
//  Copyright © 2016 p≡p Security S.A. All rights reserved.
//

import UIKit

import MessageModel

fileprivate struct AccountSettings {
    var accountName = "default"
    var idAddress = "email@example.com" // XXX: Used as login name for both, SMTP and IMAP.
    var idUserName = "User Name"
    var smtpServerAddress = "mail.example.com"
    var smtpServerType = Server.ServerType.smtp.rawValue
    var smtpServerTransport = Server.Transport.startTls.rawValue
    var smtpServerPort: UInt16 = 587
    var imapServerAddress = "mail.example.com"
    var imapServerType = Server.ServerType.imap.rawValue
    var imapServerTransport = Server.Transport.tls.rawValue
    var imapServerPort: UInt16 = 993
    var password = "somepassword" // XXX: Same used for both, SMTP and IMAP.

    init() {}

    init(accountName: String) {
        self.accountName = accountName
    }

    init(accountName: String,
         idAddress: String,
         idUserName: String,
         smtpServerAddress: String,
         smtpServerType: Server.ServerType,
         smtpServerTransport: Server.Transport,
         smtpServerPort: UInt16,
         imapServerAddress: String,
         imapServerType: Server.ServerType,
         imapServerTransport: Server.Transport,
         imapServerPort: UInt16,
         password: String) {
        self.accountName = accountName
        self.idAddress = idAddress
        self.idUserName = idUserName
        self.smtpServerAddress = smtpServerAddress
        self.smtpServerType = smtpServerType.rawValue
        self.smtpServerTransport = smtpServerTransport.rawValue
        self.smtpServerPort = smtpServerPort
        self.imapServerAddress = imapServerAddress
        self.imapServerType = imapServerType.rawValue
        self.imapServerTransport = imapServerTransport.rawValue
        self.imapServerPort = imapServerPort
        self.password = password
    }

    func cdAccount() -> CdAccount {
        let id = CdIdentity.create(
            with: ["address": idAddress, "userName": idUserName])

        let smtp = CdServer.create(
            with: ["serverType": smtpServerType,
                   "port": NSNumber(value: smtpServerPort),
                   "address": smtpServerAddress,
                   "transport": smtpServerTransport])

        let imap = CdServer.create(
            with: ["serverType": imapServerType,
                   "port": NSNumber(value: imapServerPort),
                   "address": imapServerAddress,
                   "transport": imapServerTransport])

        let key = UUID.generate()
        CdServerCredentials.add(password: password, forKey: key)

        let cred = CdServerCredentials.create(
            with: ["userName": id.address!,
                   "key": key,
                   "servers": NSSet(array: [imap, smtp])])

        let acc = CdAccount.create(with: ["identity": id,
                                          "credentials": NSOrderedSet(array: [cred])])

        return acc
    }

    func account() -> Account {
        let id = Identity.create(address: idAddress,
                                 userName: idUserName)

        let smtp = Server.create(serverType: .smtp,
                                 port: smtpServerPort,
                                 address: smtpServerAddress,
                                 transport: Server.Transport(rawValue: smtpServerTransport))


        let imap = Server.create(serverType: .imap,
                                 port: imapServerPort,
                                 address: imapServerAddress,
                                 transport: Server.Transport(rawValue: imapServerTransport))

        // Assumes
        let cred = ServerCredentials.create(userName: id.address,
                                            password: password,
                                            servers: [smtp, imap])

        let acc = Account.create(identity: id, credentials: [cred])

        return acc
    }
}

class TestData {
    fileprivate var testAccounts = [AccountSettings]()

    /**
     Add more test data (besides the default account) here.
     */
    func populateAccounts() {
        // Default account
        testAccounts.append(AccountSettings())

        // A second account as example.
        testAccounts.append(AccountSettings(
            accountName: "A second account",
            idAddress: "email2@example.com",
            idUserName: "User Name 2",
            smtpServerAddress: "mail.example.com",
            smtpServerType: Server.ServerType.smtp,
            smtpServerTransport: Server.Transport.tls,
            smtpServerPort: 587,
            imapServerAddress: "mail.example.com",
            imapServerType: Server.ServerType.imap,
            imapServerTransport: Server.Transport.tls,
            imapServerPort: 993,
            password: "someFurtherPassword"))

        // A third account, just with other account name, but with default data.
        testAccounts.append(AccountSettings(accountName: "A third account"))
    }

    /**
     - Returns: A valid `CdAccount`.
     */
    func createWorkingCdAccount(number: Int = 0) -> CdAccount {
        populateAccounts()
        return testAccounts[number].cdAccount()
    }

    /**
     - Returns: A `CdAccount` that should not be able to be verified.
     */
    func createDisfunctionalCdAccount() -> CdAccount {
        populateAccounts()
        var account = testAccounts[0]
        account.smtpServerPort = 2323
        account.imapServerPort = 2323
        return account.cdAccount()
    }

    /**
     - Returns: A valid `Account`.
     */
    func createWorkingAccount(number: Int = 0) -> Account {
        populateAccounts()
        return testAccounts[number].account()
    }

    /**
     - Returns: A `Account` with servers that should yield a quick timeout.
     */
    func createTimeoutAccount() -> Account {
        populateAccounts()
        var account = testAccounts[0]
        account.imapServerAddress = "localhost"
        account.smtpServerAddress = "localhost"
        account.smtpServerPort = 2323
        account.imapServerPort = 2323
        return account.account()
    }
}
