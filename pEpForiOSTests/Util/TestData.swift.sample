//
//  TestData.swift
//  pEpForiOS
//
//  Created by Dirk Zimmermann on 02/11/16.
//  Copyright © 2016 p≡p Security S.A. All rights reserved.
//

import UIKit

import MessageModel

fileprivate struct AccountSettings {
    var accountName = "default"
    var idAddress = "email@example.com" // XXX: Used as login name for both, SMTP and IMAP.
    var idUserName = "User Name"
    var smtpServerAddress = "mail.example.com"
    var smtpServerType = Server.ServerType.smtp.rawValue
    var smtpServerTransport = Server.Transport.startTls.rawValue
    var smtpServerPort: UInt16 = 587
    var imapServerAddress = "mail.example.com"
    var imapServerType = Server.ServerType.imap.rawValue
    var imapServerTransport = Server.Transport.tls.rawValue
    var imapServerPort: UInt16 = 993
    var password = "somepassword" // XXX: Same used for both, SMTP and IMAP.
    
    init() {}
    
    init(accountName: String)
    {
        self.accountName = accountName
    }
    
    init(accountName: String,
         idAddress: String,
         idUserName: String,
         smtpServerAddress: String,
         smtpServerType: Server.ServerType,
         smtpServerTransport: Server.Transport,
         smtpServerPort: UInt16,
         imapServerAddress: String,
         imapServerType: Server.ServerType,
         imapServerTransport: Server.Transport,
         imapServerPort: UInt16,
         password: String)
    {
        self.accountName = accountName
        self.idAddress = idAddress
        self.idUserName = idUserName
        self.smtpServerAddress = smtpServerAddress
        self.smtpServerType = smtpServerType.rawValue
        self.smtpServerTransport = smtpServerTransport.rawValue
        self.smtpServerPort = smtpServerPort
        self.imapServerAddress = imapServerAddress
        self.imapServerType = imapServerType.rawValue
        self.imapServerTransport = imapServerTransport.rawValue
        self.imapServerPort = imapServerPort
        self.password = password
    }
    
}

class TestData {
    
    fileprivate var testAccounts = [AccountSettings]()
    
    /**
     Add more test data (besides the default account) here.
     */
    func populateAccounts()
    {
        testAccounts.append(AccountSettings()) // default account
        // A second account as example:
        testAccounts.append(AccountSettings(accountName: "A second account",
                                            idAddress: "email2@example.com",
                                            idUserName: "User Name 2",
                                            smtpServerAddress: "mail.example.com",
                                            smtpServerType: Server.ServerType.smtp.rawValue,
                                            smtpServerTransport: Server.Transport.startTls.rawValue,
                                            smtpServerPort: 587,
                                            imapServerAddress: "mail.example.com",
                                            imapServerType: Server.ServerType.imap.rawValue,
                                            imapServerTransport: Server.Transport.tls.rawValue,
                                            imapServerPort: 993,
                                            password = "someFurtherPassword"))
        // A third account, just with other account name, but with default data.
        testAccounts.append(AccountSettings(accountName: "A third account"))
    }
    
    /**
     An account that should not be able to be verified.
     */
    func createDisfunctionalCdAccount() -> CdAccount {
        let account = createWorkingCdAccount()
        for creds in account.credentials!.array as! [CdServerCredentials] {
            for server in creds.servers!.sortedArray(using: []) as! [CdServer] {
                server.port = 4096
            }
        }
        return account
    }

    /**
     Like `createDisfunctionalAccount`, but this account including credentials
     should be valid.
     */
    func createWorkingCdAccount(number: Int? = 0) -> CdAccount {
        populateAccounts()
        
        let id = CdIdentity.create(
            with: ["address": testAccounts[number!].idAddress, "userName": testAccounts[number!].idUserName])
        
        let smtp = CdServer.create(
            with: ["serverType": testAccounts[number!].smtpServerType,
                   "port": testAccounts[number!].smtpServerPort,
                   "address": testAccounts[number!].smtpServerAddress,
                   "transport": testAccounts[number!].smtpServerTransport])
        
        let imap = CdServer.create(
            with: ["serverType": testAccounts[number!].imapServerType,
                   "port": testAccounts[number!].imapServerPort,
                   "address": testAccounts[number!].imapServerType,
                   "transport": testAccounts[number!].imapServerTransport])

        let key = UUID.generate()
        CdServerCredentials.add(password: testAccounts[number!].password, forKey: key)

        let cred = CdServerCredentials.create(
            with: ["userName": id.address!,
                   "key": key,
                   "servers": NSSet(array: [imap, smtp])])
        
        let acc = CdAccount.create(with: ["identity": id,
                                          "credentials": NSOrderedSet(array: [cred])])
        
        return acc
    }

    func createWorkingAccount(number: Int? = 0) -> Account {
        populateAccounts()
        
        let id = Identity.create(address: testAccounts[number!].idAddress,
                                 userName: testAccounts[number!].idUserName)
        
        let smtp = Server.create(serverType: .smtp,
                                 port: testAccounts[number!].smtpServerPort,
                                 address: testAccounts[number!].smtpServerAddress,
                                 transport: Server.Transport(rawValue: testAccounts[number!].smtpServerTransport))
        
        
        let imap = Server.create(serverType: .imap,
                                 port: testAccounts[number!].imapServerPort,
                                 address: testAccounts[number!].imapServerAddress,
                                 transport: Server.Transport(rawValue: testAccounts[number!].imapServerTransport))
        
        // Assumes
        let cred = ServerCredentials.create(userName: id.address,
                                            password: testAccounts[number!].password,
                                            servers: [smtp, imap])
        
        let acc = Account.create(identity: id, credentials: [cred])
        
        return acc
    }

    func createDisfunctionalAccount() -> Account {
        let acc = createWorkingAccount()
        for sc in acc.serverCredentials {
            for server in sc.servers {
                server.port = 4096
            }
        }
        return acc
    }
}
