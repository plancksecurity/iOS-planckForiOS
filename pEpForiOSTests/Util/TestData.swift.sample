//
//  TestData.swift
//  pEpForiOS
//
//  Created by Dirk Zimmermann on 02/11/16.
//  Copyright © 2016 p≡p Security S.A. All rights reserved.
//

import UIKit

import MessageModel

class TestData {
    /**
     An account that should not be able to be verified.
     */
    func createDisfunctionalAccount() -> Account {
        let id = Identity.create(address: "user1@example.com", userName: "User 1",
                                 userID: "user1")

       /* An SMTP server usually has following valid arguments:
          - serverType: .smtp (only)
          - port: 465 (Int example: usual for secured connections)
          - address: "mail.example.com" (String example)
          - transport: .plain, .tls or .startTls (prefer .tls, if supported)
        */
        let smtp = Server.create(serverType: .smtp, port: 4096, address: "localhost",
                                 transport: .plain)

	/* An IMAP server usually has following valid arguments:
          - serverType: .imap (only)
          - port: 993 (Int example: usual for secured connections)
          - address: "mail.example.com" (String example)
          - transport: .plain, .tls or .startTls (prefer .tls, if supported)
        */
        let imap = Server.create(serverType: .imap, port: 4097, address: "localhost",
                                 transport: .plain)

        /* If credential data differs between the SMTP and IMAP connections, two seperate
           identities need to be created, with then different userName (String) and password
           (String) arguments in place.
         */
        let cred = ServerCredentials.create(userName: id.address, password: "password",
                                            servers: [smtp, imap])
        let acc = Account.create(identity: id, credentials: [cred])
        return acc
    }

    /**
     Like `createDisfunctionalAccount`, but this account including credentials
     should be valid.
     */
    func createWorkingAccount() -> Account {
        let id = Identity.create(address: "user1@example.com", userName: "User 1",
                                 userID: "user1")
        let smtp = Server.create(serverType: .smtp, port: 4096, address: "localhost",
                                 transport: .plain)
        let imap = Server.create(serverType: .imap, port: 4097, address: "localhost",
                                 transport: .plain)
        let cred = ServerCredentials.create(userName: id.address, password: "password",
                                            servers: [smtp, imap])
        let acc = Account.create(identity: id, credentials: [cred])
        return acc
    }
}

